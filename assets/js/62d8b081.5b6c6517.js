"use strict";(self.webpackChunkah_kevin_xy=self.webpackChunkah_kevin_xy||[]).push([[80468],{79236:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(74848),a=t(28453);const i={},c="utils",s={id:"backend/go/gin/source/1.7.7/utils",title:"utils",description:"",source:"@site/docs/backend/go/gin/source/1.7.7/utils.md",sourceDirName:"backend/go/gin/source/1.7.7",slug:"/backend/go/gin/source/1.7.7/utils",permalink:"/docs/backend/go/gin/source/1.7.7/utils",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"tree",permalink:"/docs/backend/go/gin/source/1.7.7/tree"},next:{title:"\u9762\u8bd5",permalink:"/docs/backend/go/interview/"}},o={},u=[];function l(n){const e={code:"code",h1:"h1",pre:"pre",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"utils",children:"utils"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'// Copyright 2014 Manu Martinez-Almeida.  All rights reserved.\n// Use of this source code is governed by a MIT style\n// license that can be found in the LICENSE file.\n\npackage gin\n\nimport (\n "encoding/xml"\n "net/http"\n "os"\n "path"\n "reflect"\n "runtime"\n "strings"\n)\n\n// BindKey indicates a default bind key.\nconst BindKey = "_gin-gonic/gin/bindkey"\n\n// Bind is a helper function for given interface object and returns a Gin middleware.\nfunc Bind(val interface{}) HandlerFunc {\n value := reflect.ValueOf(val)\n if value.Kind() == reflect.Ptr {\n  panic(`Bind struct can not be a pointer. Example:\n Use: gin.Bind(Struct{}) instead of gin.Bind(&Struct{})\n`)\n }\n typ := value.Type()\n\n return func(c *Context) {\n  obj := reflect.New(typ).Interface()\n  if c.Bind(obj) == nil {\n   c.Set(BindKey, obj)\n  }\n }\n}\n\n// WrapF is a helper function for wrapping http.HandlerFunc and returns a Gin middleware.\nfunc WrapF(f http.HandlerFunc) HandlerFunc {\n return func(c *Context) {\n  f(c.Writer, c.Request)\n }\n}\n\n// WrapH is a helper function for wrapping http.Handler and returns a Gin middleware.\nfunc WrapH(h http.Handler) HandlerFunc {\n return func(c *Context) {\n  h.ServeHTTP(c.Writer, c.Request)\n }\n}\n\n// H is a shortcut for map[string]interface{}\ntype H map[string]interface{}\n\n// MarshalXML allows type H to be used with xml.Marshal.\nfunc (h H) MarshalXML(e *xml.Encoder, start xml.StartElement) error {\n start.Name = xml.Name{\n  Space: "",\n  Local: "map",\n }\n if err := e.EncodeToken(start); err != nil {\n  return err\n }\n for key, value := range h {\n  elem := xml.StartElement{\n   Name: xml.Name{Space: "", Local: key},\n   Attr: []xml.Attr{},\n  }\n  if err := e.EncodeElement(value, elem); err != nil {\n   return err\n  }\n }\n\n return e.EncodeToken(xml.EndElement{Name: start.Name})\n}\n\nfunc assert1(guard bool, text string) {\n if !guard {\n  panic(text)\n }\n}\n\nfunc filterFlags(content string) string {\n for i, char := range content {\n  if char == \' \' || char == \';\' {\n   return content[:i]\n  }\n }\n return content\n}\n\nfunc chooseData(custom, wildcard interface{}) interface{} {\n if custom != nil {\n  return custom\n }\n if wildcard != nil {\n  return wildcard\n }\n panic("negotiation config is invalid")\n}\n\nfunc parseAccept(acceptHeader string) []string {\n parts := strings.Split(acceptHeader, ",")\n out := make([]string, 0, len(parts))\n for _, part := range parts {\n  if i := strings.IndexByte(part, \';\'); i > 0 {\n   part = part[:i]\n  }\n  if part = strings.TrimSpace(part); part != "" {\n   out = append(out, part)\n  }\n }\n return out\n}\n\nfunc lastChar(str string) uint8 {\n if str == "" {\n  panic("The length of the string can\'t be 0")\n }\n return str[len(str)-1]\n}\n\nfunc nameOfFunction(f interface{}) string {\n return runtime.FuncForPC(reflect.ValueOf(f).Pointer()).Name()\n}\n\nfunc joinPaths(absolutePath, relativePath string) string {\n if relativePath == "" {\n  return absolutePath\n }\n\n finalPath := path.Join(absolutePath, relativePath)\n if lastChar(relativePath) == \'/\' && lastChar(finalPath) != \'/\' {\n  return finalPath + "/"\n }\n return finalPath\n}\n\nfunc resolveAddress(addr []string) string {\n switch len(addr) {\n case 0:\n  if port := os.Getenv("PORT"); port != "" {\n   debugPrint("Environment variable PORT=\\"%s\\"", port)\n   return ":" + port\n  }\n  debugPrint("Environment variable PORT is undefined. Using port :8080 by default")\n  return ":8080"\n case 1:\n  return addr[0]\n default:\n  panic("too many parameters")\n }\n}\n\n'})})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>s});var r=t(96540);const a={},i=r.createContext(a);function c(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:c(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);