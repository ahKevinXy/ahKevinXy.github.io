"use strict";(self.webpackChunkah_kevin_xy=self.webpackChunkah_kevin_xy||[]).push([[9900],{3905:function(e,n,o){o.d(n,{Zo:function(){return p},kt:function(){return w}});var r=o(67294);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function a(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?a(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,r,t=function(e,n){if(null==e)return{};var o,r,t={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var c=r.createContext({}),s=function(e){var n=r.useContext(c),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var o=e.components,t=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),k=s(o),g=t,w=k["".concat(c,".").concat(g)]||k[g]||u[g]||a;return o?r.createElement(w,i(i({ref:n},p),{},{components:o})):r.createElement(w,i({ref:n},p))}));function w(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=o.length,i=new Array(a);i[0]=g;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[k]="string"==typeof e?e:t,i[1]=l;for(var s=2;s<a;s++)i[s]=o[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}g.displayName="MDXCreateElement"},53042:function(e,n,o){o.r(n),o.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return w},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return k}});var r=o(83117),t=o(80102),a=(o(67294),o(3905)),i=["components"],l={title:"\u9ad8\u6027\u80fd\u534f\u7a0b\u6c60ants\u6e90\u7801\u5256\u6790",tags:["Go","ants"],authors:"ahKevinXy",description:"\u9ad8\u6027\u80fd\u534f\u7a0b\u6c60ants\u6e90\u7801\u5256\u6790 ants\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684 goroutine \u6c60\uff0c\u5b9e\u73b0\u4e86\u5bf9\u5927\u89c4\u6a21 goroutine \u7684\u8c03\u5ea6\u7ba1\u7406",keywords:["\u5185\u5b58\u5bf9\u9f50","Go\u7684\u5185\u5b58\u5bf9\u9f50\u673a\u5236"],date:new Date("2023-03-06T15:17:31.000Z"),image:"https://www.dmoe.cc/random.php?type=2304061"},c="\u9ad8\u6027\u80fd\u534f\u7a0b\u6c60ants\u6e90\u7801\u5256\u6790",s={permalink:"/blog/2023/03/06/ants",source:"@site/blog/2023/03/06/ants.md",title:"\u9ad8\u6027\u80fd\u534f\u7a0b\u6c60ants\u6e90\u7801\u5256\u6790",description:"\u9ad8\u6027\u80fd\u534f\u7a0b\u6c60ants\u6e90\u7801\u5256\u6790 ants\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684 goroutine \u6c60\uff0c\u5b9e\u73b0\u4e86\u5bf9\u5927\u89c4\u6a21 goroutine \u7684\u8c03\u5ea6\u7ba1\u7406",date:"2023-03-06T15:17:31.000Z",formattedDate:"2023\u5e743\u67086\u65e5",tags:[{label:"Go",permalink:"/blog/tags/go"},{label:"ants",permalink:"/blog/tags/ants"}],readingTime:12.845,hasTruncateMarker:!0,authors:[{name:"ahKevinXy",title:"\u4f5c\u8005",url:"https://github.com/ahKevinXy",email:"ahkevinxy@gmail.com",imageURL:"/img/headers.png",key:"ahKevinXy"}],frontMatter:{title:"\u9ad8\u6027\u80fd\u534f\u7a0b\u6c60ants\u6e90\u7801\u5256\u6790",tags:["Go","ants"],authors:"ahKevinXy",description:"\u9ad8\u6027\u80fd\u534f\u7a0b\u6c60ants\u6e90\u7801\u5256\u6790 ants\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684 goroutine \u6c60\uff0c\u5b9e\u73b0\u4e86\u5bf9\u5927\u89c4\u6a21 goroutine \u7684\u8c03\u5ea6\u7ba1\u7406",keywords:["\u5185\u5b58\u5bf9\u9f50","Go\u7684\u5185\u5b58\u5bf9\u9f50\u673a\u5236"],date:"2023-03-06T15:17:31.000Z",image:"https://www.dmoe.cc/random.php?type=2304061"},prevItem:{title:"\u767d\u5ad6\u7684\u5de5\u5177",permalink:"/blog/2023/07/16/free"},nextItem:{title:"Go\u7684\u5185\u5b58\u5bf9\u9f50\u673a\u5236",permalink:"/blog/2023/03/06/memory_struct"}},p={authorsImageUrls:[void 0]},k=[{value:"\u7b80\u4ecb",id:"\u7b80\u4ecb",level:2},{value:"ants\u662f\u4ec0\u4e48",id:"ants\u662f\u4ec0\u4e48",level:3},{value:"\u529f\u80fd\u7279\u70b9",id:"\u529f\u80fd\u7279\u70b9",level:3},{value:"ants\u6838\u5fc3\u6982\u5ff5",id:"ants\u6838\u5fc3\u6982\u5ff5",level:3},{value:"Pool\u534f\u7a0b\u6c60",id:"pool\u534f\u7a0b\u6c60",level:2},{value:"Pool\u7ed3\u6784",id:"pool\u7ed3\u6784",level:3},{value:"Pool\u521b\u5efa",id:"pool\u521b\u5efa",level:3},{value:"\u81ea\u65cb\u9501SpinLock(\u91cd\u70b9)",id:"\u81ea\u65cb\u9501spinlock\u91cd\u70b9",level:3},{value:"\u5173\u952e\u77e5\u8bc6\u70b9",id:"\u5173\u952e\u77e5\u8bc6\u70b9",level:3},{value:"\u4efb\u52a1\u6267\u884c",id:"\u4efb\u52a1\u6267\u884c",level:2},{value:"goWorker\u7684\u7ed3\u6784",id:"goworker\u7684\u7ed3\u6784",level:3},{value:"goWoker\u7684\u521d\u59cb\u5316",id:"gowoker\u7684\u521d\u59cb\u5316",level:3},{value:"workerChanCap\u7684\u503c",id:"workerchancap\u7684\u503c",level:3},{value:"Task \u4efb\u52a1\u63d0\u4ea4",id:"task-\u4efb\u52a1\u63d0\u4ea4",level:3},{value:"retrieveWorker \uff08\u53ef\u7528worker\u83b7\u53d6\uff09",id:"retrieveworker-\u53ef\u7528worker\u83b7\u53d6",level:3},{value:"WorkerArray \u5de5\u4f5c\u6c60\u7684\u7ed3\u6784",id:"workerarray-\u5de5\u4f5c\u6c60\u7684\u7ed3\u6784",level:3},{value:"\u4efb\u52a1\u6267\u884c",id:"\u4efb\u52a1\u6267\u884c-1",level:3},{value:"\u5b9a\u65f6\u6e05\u7406\u8fc7\u671f\u7684worker",id:"\u5b9a\u65f6\u6e05\u7406\u8fc7\u671f\u7684worker",level:3}],u={toc:k},g="wrapper";function w(e){var n=e.components,o=(0,t.Z)(e,i);return(0,a.kt)(g,(0,r.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u7b80\u4ecb"},"\u7b80\u4ecb"),(0,a.kt)("h3",{id:"ants\u662f\u4ec0\u4e48"},"ants\u662f\u4ec0\u4e48"),(0,a.kt)("p",null,"ants\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684 goroutine \u6c60\uff0c\u5b9e\u73b0\u4e86\u5bf9\u5927\u89c4\u6a21 goroutine \u7684\u8c03\u5ea6\u7ba1\u7406\u3001goroutine \u590d\u7528\uff0c\u5141\u8bb8\u4f7f\u7528\u8005\u5728\u5f00\u53d1\u5e76\u53d1\u7a0b\u5e8f\u7684\u65f6\u5019\u9650\u5236 goroutine \u6570\u91cf\uff0c\u590d\u7528\u8d44\u6e90\uff0c\u8fbe\u5230\u66f4\u9ad8\u6548\u6267\u884c\u4efb\u52a1\u7684\u6548\u679c\u3002"),(0,a.kt)("h3",{id:"\u529f\u80fd\u7279\u70b9"},"\u529f\u80fd\u7279\u70b9"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u81ea\u52a8\u8c03\u5ea6\u6d77\u91cf\u7684 goroutines\uff0c\u590d\u7528 goroutines"),(0,a.kt)("li",{parentName:"ul"},"\u5b9a\u671f\u6e05\u7406\u8fc7\u671f\u7684 goroutines\uff0c\u8fdb\u4e00\u6b65\u8282\u7701\u8d44\u6e90"),(0,a.kt)("li",{parentName:"ul"},"\u63d0\u4f9b\u4e86\u5927\u91cf\u6709\u7528\u7684\u63a5\u53e3\uff1a\u4efb\u52a1\u63d0\u4ea4\u3001\u83b7\u53d6\u8fd0\u884c\u4e2d\u7684 goroutine \u6570\u91cf\u3001\u52a8\u6001\u8c03\u6574 Pool \u5927\u5c0f\u3001\u91ca\u653e Pool\u3001\u91cd\u542f Pool"),(0,a.kt)("li",{parentName:"ul"},"\u4f18\u96c5\u5904\u7406 panic\uff0c\u9632\u6b62\u7a0b\u5e8f\u5d29\u6e83"),(0,a.kt)("li",{parentName:"ul"},"\u8d44\u6e90\u590d\u7528\uff0c\u6781\u5927\u8282\u7701\u5185\u5b58\u4f7f\u7528\u91cf\uff1b\u5728\u5927\u89c4\u6a21\u6279\u91cf\u5e76\u53d1\u4efb\u52a1\u573a\u666f\u4e0b\u6bd4\u539f\u751f goroutine \u5e76\u53d1\u5177\u6709\u66f4\u9ad8\u7684\u6027\u80fd"),(0,a.kt)("li",{parentName:"ul"},"\u975e\u963b\u585e\u673a\u5236")),(0,a.kt)("h3",{id:"ants\u6838\u5fc3\u6982\u5ff5"},"ants\u6838\u5fc3\u6982\u5ff5"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pool \uff1a\u534f\u7a0b\u6c60"),(0,a.kt)("li",{parentName:"ul"},"WorkerArray\uff1aPool\u6c60\u4e2d\u7684worker\u961f\u5217\uff0c\u5b58\u653e\u6240\u6709\u7684goWorker"),(0,a.kt)("li",{parentName:"ul"},"goWorker\uff1a\u8fd0\u884c\u4efb\u52a1\u7684\u5b9e\u9645\u6267\u884c\u8005\uff0c\u5b83\u542f\u52a8\u4e00\u4e2a goroutine \u6765\u63a5\u53d7\u4efb\u52a1\u5e76\u6267\u884c\u51fd\u6570\u8c03\u7528\u3002")),(0,a.kt)("h2",{id:"pool\u534f\u7a0b\u6c60"},"Pool\u534f\u7a0b\u6c60"),(0,a.kt)("h3",{id:"pool\u7ed3\u6784"},"Pool\u7ed3\u6784"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Ants \u63d0\u4f9b\u4e86\u4e24\u79cdPool\u7ed3\u6784\uff1aPool\u548cPoolWithFunc \uff1b\u4f46\u4e24\u8005\u903b\u8f91\u5927\u81f4\u4e00\u6837\uff0c\u672c\u6587\u7740\u91cd\u4ecb\u7ecdPool\u7684\u7ed3\u6784")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"}," // Pool accepts the tasks from client, it limits the total of goroutines to a given number by recycling goroutines.\ntype Pool struct {\n // capacity of the pool, a negative value means that the capacity of pool is limitless, an infinite pool is used to\n // avoid potential issue of endless blocking caused by nested usage of a pool: submitting a task to pool\n // which submits a new task to the same pool.\n  // \u534f\u7a0b\u6c60\u7684\u5bb9\u91cf\n capacity int32\n\n // running is the number of the currently running goroutines.\n  // \u6b63\u5728\u8fd0\u884c\u7684goroutines\u7684\u6570\u91cf\n running int32\n\n // lock for protecting the worker queue.\n  // \u9501\uff0c\u81ea\u65cb\u9501\uff0c\u4fdd\u62a4\u961f\u5217\n lock sync.Locker\n\n // workers is a slice that store the available workers.\n  // \u5b58\u653e\u6c60\u4e2d\u6240\u6709\u7684worker,workerArray\u5305\u542b\u53ef\u7528workers\u961f\u5217\u548c\u8fc7\u671fworkers\u961f\u5217\uff0c\u53ea\u4f1a\u4ece\u53ef\u7528workers\u961f\u5217\u4e2d\u53d6\u53ef\u7528worker\n workers workerArray\n\n // state is used to notice the pool to closed itself.\n  // \u8bb0\u5f55\u6c60\u5b50\u7684\u72b6\u6001 \uff08\u5173\u95ed\u3001\u5f00\u542f\uff09\n state int32\n\n // cond for waiting to get an idle worker.\n  // \u6761\u4ef6\u53d8\u91cf\n cond *sync.Cond\n\n // workerCache speeds up the obtainment of a usable worker in function:retrieveWorker.\n  // worker \u5bf9\u8c61\u6c60\n workerCache sync.Pool\n\n // waiting is the number of goroutines already been blocked on pool.Submit(), protected by pool.lock\n  //\u963b\u585e\u7b49\u5f85\u7684\u4efb\u52a1\u91cf\n waiting int32\n // \u6e05\u9053\u592b\uff0c\u5b9a\u65f6\u6e05\u7406workerarray \u961f\u5217\u4e2d\u8fc7\u671f\u7684worker\n purgeDone int32\n stopPurge context.CancelFunc\n // \u5b9a\u65f6\u5668 \u66f4\u65b0pool\u4e2dnow\u7684\u5b57\u6bb5\n ticktockDone int32\n stopTicktock context.CancelFunc\n\n now atomic.Value\n // \u9700\u8981\u81ea\u5b9a\u4e49\u52a0\u8f7d\u7684\u914d\u7f6e\n options *Options\n}\n\n")),(0,a.kt)("h3",{id:"pool\u521b\u5efa"},"Pool\u521b\u5efa"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// NewPool generates an instance of ants pool.\nfunc NewPool(size int, options ...Option) (*Pool, error) {\n opts := loadOptions(options...) // \u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684options\u4e2d\u7684\u914d\u7f6e\n\n if size <= 0 {\n  size = -1\n }\n\n if !opts.DisablePurge {// \u5f53 DisablePurge \u4e3a true \u65f6\uff0cworker \u4e0d\u4f1a\u88ab\u6e05\u9664\u5e76\u4e14\u662f\u9a7b\u7559\u7684\u3002\n  if expiry := opts.ExpiryDuration; expiry < 0 {\n   return nil, ErrInvalidPoolExpiry\n  } else if expiry == 0 {\n   opts.ExpiryDuration = DefaultCleanIntervalTime // \u9ed8\u8ba4\u95f4\u9694\u65f6\u95f41s\n  }\n }\n\n if opts.Logger == nil {\n  opts.Logger = defaultLogger\n }\n\n p := &Pool{\n  capacity: int32(size),\n  lock:     syncx.NewSpinLock(),//\u81ea\u65cb\u9501\n  options:  opts,\n }\n p.workerCache.New = func() interface{} { //sync.pool \u521d\u59cb\u5316\n  return &goWorker{\n   pool: p,\n   task: make(chan func(), workerChanCap),\n  }\n }\n if p.options.PreAlloc {\n  if size == -1 {\n   return nil, ErrInvalidPreAllocSize\n  }\n  p.workers = newWorkerArray(loopQueueType, size) //\u5faa\u73af\u961f\u5217\n } else {\n  p.workers = newWorkerArray(stackType, 0) //\u6570\u7ec4\n }\n\n p.cond = sync.NewCond(p.lock) // sync.cond\u521d\u59cb\u5316\n\n p.goPurge()\n p.goTicktock()\n\n return p, nil\n}\n\n\n")),(0,a.kt)("h3",{id:"\u81ea\u65cb\u9501spinlock\u91cd\u70b9"},"\u81ea\u65cb\u9501SpinLock(\u91cd\u70b9)"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u601d\u8003\uff1a\u5982\u4f55\u8bbe\u8ba1\u4e00\u79cd\u81ea\u65cb\u9501\uff0c\u8bbe\u8ba1\u81ea\u65cb\u9501\u65f6\u9700\u8981\u6ce8\u610f\u4ec0\u4e48\uff1f")),(0,a.kt)("p",null,"spinLock\u662f\u57fa\u4e8eCAS\u673a\u5236\u548c\u6307\u6570\u9000\u907f\u7b97\u6cd5\u5b9e\u73b0\u7684\u4e00\u79cd\u81ea\u65cb\u9501"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package sync\n\nimport (\n "runtime"\n "sync"\n "sync/atomic"\n)\n\ntype spinLock uint32 // \u5b9e\u73b0sync.Locker\u63a5\u53e3\n\nconst maxBackoff = 16 //\u6700\u5927\u7684\u56de\u907f\u6b21\u6570\n\nfunc (sl *spinLock) Lock() {\n backoff := 1\n  // \u57fa\u4e8eCAS\u673a\u5236\uff0c\u5c1d\u8bd5\u83b7\u53d6\u9501\uff0c\u4e14\u4f7f\u7528\u6307\u6570\u9000\u907f\u7b97\u6cd5\u6765\u63d0\u4f9b\u83b7\u53d6\u9501\u7684\u6210\u529f\u7387\n for !atomic.CompareAndSwapUint32((*uint32)(sl), 0, 1) {\n  // Leverage the exponential backoff algorithm, see https://en.wikipedia.org/wiki/Exponential_backoff.\n  for i := 0; i < backoff; i++ {\n     //runtime.Gosched()\u51fd\u6570\u529f\u80fd\uff1a\u4f7f\u5f53\u524dgoroutine\u8ba9\u51faCPU\u65f6\u95f4\u7247\uff08\u201c\u56de\u907f\u201d\uff09\uff0c\u8ba9\u5176\u4ed6\u7684goroutine\u83b7\u5f97\u6267\u884c\u7684\u673a\u4f1a\u3002\u5f53\u524d\u7684goroutine\u4f1a\u5728\u672a\u6765\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u7ee7\u7eed\u8fd0\u884c\u3002\n    //\u6ce8\u610f\uff1a\u5f53\u4e00\u4e2agoroutine\u53d1\u751f\u963b\u585e\uff0cGo\u4f1a\u81ea\u52a8\u5730\u628a\u4e0e\u8be5goroutine\u5904\u4e8e\u540c\u4e00\u7cfb\u7edf\u7ebf\u7a0b\u7684\u5176\u4ed6goroutines\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u7cfb\u7edf\u7ebf\u7a0b\u4e0a\u53bb\uff0c\u4ee5\u4f7f\u8fd9\u4e9bgoroutines\u4e0d\u963b\u585e\uff08\u4eceGMP\u6a21\u578b\u89d2\u5ea6\u6765\u8bf4\uff0c\u5c31\u662f\u5f53\u4e0eP\u7ed1\u5b9a\u7684M\u53d1\u751f\u963b\u585e\uff0cP\u5c31\u4e0e\u5176\u89e3\u7ed1\uff0c\u7136\u540e\u4e0e\u53e6\u4e00\u4e2a\u7a7a\u95f2\u7684M\u8fdb\u884c\u7ed1\u5b9a \u6216\u8005 \u53bb\u521b\u5efa\u4e00\u4e2aM\u8fdb\u884c\u7ed1\u5b9a\uff09\u3002\n   runtime.Gosched()\n  }\n  if backoff < maxBackoff {\n   backoff <<= 1\n  }\n }\n}\n\nfunc (sl *spinLock) Unlock() {\n  //\u539f\u5b50\u64cd\u4f5c\uff0c\u5e76\u53d1\u5b89\u5168\n atomic.StoreUint32((*uint32)(sl), 0)\n}\n\n// NewSpinLock instantiates a spin-lock.\nfunc NewSpinLock() sync.Locker {\n return new(spinLock)\n}\n\n\n')),(0,a.kt)("p",null,"sync.Locker"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u8bbe\u8ba1\u9501\u65f6\u5fc5\u987b\u5b9e\u73b0\u8be5\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// A Locker represents an object that can be locked and unlocked.\ntype Locker interface {\n Lock()\n Unlock()\n}\n\n")),(0,a.kt)("h3",{id:"\u5173\u952e\u77e5\u8bc6\u70b9"},"\u5173\u952e\u77e5\u8bc6\u70b9"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"sync.Locker\u63a5\u53e3"),(0,a.kt)("li",{parentName:"ul"},"\u6307\u6570\u9000\u907f\u7b97\u6cd5"),(0,a.kt)("li",{parentName:"ul"},"atomic \u539f\u5b50\u5305\u4e2d\u7684\u65b9\u6cd5\u4e86\u89e3"),(0,a.kt)("li",{parentName:"ul"},"runtime.Gosched()")),(0,a.kt)("h2",{id:"\u4efb\u52a1\u6267\u884c"},"\u4efb\u52a1\u6267\u884c"),(0,a.kt)("h3",{id:"goworker\u7684\u7ed3\u6784"},"goWorker\u7684\u7ed3\u6784"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// goWorker is the actual executor who runs the tasks,\n// it starts a goroutine that accepts tasks and\n// performs function calls.\n//goWorker \u662f\u8fd0\u884c\u4efb\u52a1\u7684\u5b9e\u9645\u6267\u884c\u8005\uff0c\u5b83\u542f\u52a8\u4e00\u4e2a goroutine \u6765\u63a5\u53d7\u4efb\u52a1\u5e76\u6267\u884c\u51fd\u6570\u8c03\u7528\u3002\ntype goWorker struct {\n // pool who owns this worker.\n pool *Pool // \u62e5\u6709worker\u7684\u534f\u8bae\u6c60\n\n // task is a job should be done.\n task chan func() // \u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\uff0c\u6ce8\u610f\uff1a\u8be5chan \u53ef\u80fd\u662f\u7f13\u5b58\u533a\u6216\u8005\u975e\u7f13\u5b58\u533a\uff0c\u5982\u679c\u662f\u591a\u6838\u7684\u8bdd\uff0c\u7f13\u5b58\u533a\u7684\u5927\u5c0f\u662f1\n\n // recycleTime will be updated when putting a worker back into queue.\n recycleTime time.Time // \u56de\u6536\u65f6\u95f4\n}\n")),(0,a.kt)("h3",{id:"gowoker\u7684\u521d\u59cb\u5316"},"goWoker\u7684\u521d\u59cb\u5316"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"goWorker \u662fsync.pool \u5bf9\u8c61\u6c60\u521b\u5efa\u7684\uff1b\u521d\u59cb\u5316\u5728Pool\u521b\u5efa\u65f6")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"p.workerCache.New = func() interface{} {\n  return &goWorker{\n   pool: p,\n   task: make(chan func(), workerChanCap),\n  }\n }\n\n")),(0,a.kt)("h3",{id:"workerchancap\u7684\u503c"},"workerChanCap\u7684\u503c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// workerChanCap determines whether the channel of a worker should be a buffered channel\n // to get the best performance. Inspired by fasthttp at\n // https://github.com/valyala/fasthttp/blob/master/workerpool.go#L139\n workerChanCap = func() int {\n  // Use blocking channel if GOMAXPROCS=1.\n  // This switches context from sender to receiver immediately,\n  // which results in higher performance (under go1.5 at least).\n  if runtime.GOMAXPROCS(0) == 1 {\n   return 0\n  }\n\n  // Use non-blocking workerChan if GOMAXPROCS>1,\n  // since otherwise the sender might be dragged down if the receiver is CPU-bound.\n  return 1\n }()\n")),(0,a.kt)("h3",{id:"task-\u4efb\u52a1\u63d0\u4ea4"},"Task \u4efb\u52a1\u63d0\u4ea4"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (p *Pool) Submit(task func()) error {\n if p.IsClosed() { // \u524d\u7f6e\u68c0\u67e5 \u534f\u7a0b\u6c60\u662f\u5426\u5173\u95ed\n  return ErrPoolClosed\n }\n var w *goWorker\n if w = p.retrieveWorker(); w == nil { //\u83b7\u53d6\u4e00\u4e2a\u53ef\u7528\u7684worker\u53d6\u6267\u884c\u4efb\u52a1\n  return ErrPoolOverload\n }\n w.task <- task\n return nil\n}\n\n")),(0,a.kt)("h3",{id:"retrieveworker-\u53ef\u7528worker\u83b7\u53d6"},"retrieveWorker \uff08\u53ef\u7528worker\u83b7\u53d6\uff09"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// retrieveWorker returns an available worker to run the tasks.\nfunc (p *Pool) retrieveWorker() (w *goWorker) {\n spawnWorker := func() { // \u4f7f\u7528sync.pool \u521b\u5efaworker\n  w = p.workerCache.Get().(*goWorker)\n  w.run()\n }\n\n p.lock.Lock() // \u81ea\u65cb\u9501 \u52a0\u9501\n\n w = p.workers.detach() // \u5c1d\u8bd5\u4eceworker\u6c60\u5b50\u4e2d\u83b7\u53d6\u53ef\u7528\u7684worker\uff0c\u6ce8\uff1a\u4efb\u52a1\u6267\u884c\u5b8c\u540e\uff0c\u4f1a\u56de\u6536worker \u4ee5\u4fbf\u4e0b\u6b21\u4f7f\u7528\n if w != nil { // first try to fetch the worker from the queue  \u83b7\u53d6\u5230\u8fd4\u56de\n  p.lock.Unlock()\n } else if capacity := p.Cap(); capacity == -1 || capacity > p.Running() { // \u5224\u65ad\u6b63\u5728\u8fd0\u884c\u7684worker \u662f\u5426\u8d85\u8fc7 pool\u534f\u7a0b\u8bcd\u8bbe\u7f6e\u7684\u5bb9\u91cf\u5927\u5c0f\uff0c\u6ce8 capacity=-1 \u8868\u793a\u6c60\u5b50\u5bb9\u91cf\u65e0\u9650\u5927\n  // if the worker queue is empty and we don't run out of the pool capacity,\n  // then just spawn a new worker goroutine.\n  p.lock.Unlock()\n  spawnWorker() // \u521b\u5efaworker\n } else { // otherwise, we'll have to keep them blocked and wait for at least one worker to be put back into pool.\n  if p.options.Nonblocking { // \u5224\u65ad\u534f\u7a0b\u6c60\u662f\u5426 \u662f\u975e\u963b\u585e\u6a21\u5f0f \uff0c\u5982\u679c\u662f\u975e\u963b\u585e\u6a21\u5f0f\u4e0b\u5c31\u76f4\u63a5\u8fd4\u56de\n   p.lock.Unlock()\n   return\n  }\n retry: // \u963b\u585e\u6a21\u5f0f\u4e0b\u7684\u903b\u8f91\n    // \u5224\u65ad\u963b\u585e\u7684\u4efb\u52a1\u6570\u91cf\u662f\u5426\u8d85\u8fc7\u4e86\u8bbe\u7f6e\u7684\u6700\u5927\u9608\u503c\uff0c\u5982\u679c\u8d85\u8fc7\u76f4\u63a5\u8fd4\u56de\n  if p.options.MaxBlockingTasks != 0 && p.Waiting() >= p.options.MaxBlockingTasks {\n   p.lock.Unlock()\n   return\n  }\n  p.addWaiting(1) // \u963b\u585e\u4efb\u52a1\u6570\u91cf\u52a01\n  p.cond.Wait() // block and wait for an available worker\n  p.addWaiting(-1) // \u83b7\u53d6\u5230\u53ef\u7528\u7684worker\u540e\uff0c\u963b\u585e\u6570\u91cf\u51cf\u4e00\n\n  if p.IsClosed() { // check pool\u6c60\u662f\u5426\u5173\u95ed\n   p.lock.Unlock()\n   return\n  }\n\n  var nw int\n  if nw = p.Running(); nw == 0 { // \u5982\u679c\u6b63\u5728\u6267\u884c\u7684worker\u6570\u91cf\u4e3a0\u65f6\uff0c\u9700\u8981\u91cd\u65b0\u521b\u5efawoker\n   p.lock.Unlock()\n   spawnWorker()\n   return\n  }\n  if w = p.workers.detach(); w == nil { //\u4eceworkerArray\u4e2d\u83b7\u53d6\u53ef\u7528\u7684worker\n   if nw < p.Cap() { // \u83b7\u53d6\u4e0d\u5230\uff0c\u5224\u65ad\u6b63\u5728\u8fd0\u884c\u7684goroutines\u7684\u6570\u91cf\u662f\u5426\u8d85\u8fc7\u534f\u5c42\u6c60\u7684\u5bb9\u91cf\uff0c\u6ca1\u6709\u5c31\u521b\u5efa\n    p.lock.Unlock()\n    spawnWorker()\n    return\n   }\n   goto retry // goto \u91cd\u8bd5\u963b\u585e\u6a21\u5f0f\u4e0b\u83b7\u53d6\u53ef\u7528worker\u7684\u903b\u8f91\n  }\n  p.lock.Unlock()\n }\n return\n}\n\n")),(0,a.kt)("h3",{id:"workerarray-\u5de5\u4f5c\u6c60\u7684\u7ed3\u6784"},"WorkerArray \u5de5\u4f5c\u6c60\u7684\u7ed3\u6784"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"\ntype workerArray interface {\n len() int // \u957f\u5ea6\n isEmpty() bool // \u662f\u5426\u4e3a\u7a7a\n insert(worker *goWorker) error // \u63d2\u5165\n detach() *goWorker // \u4eceWorkerArray\u83b7\u53d6\u53ef\u7528\u7684worker\n retrieveExpiry(duration time.Duration) []*goWorker  //\u6e05\u9053\u592b\u8c03\u7528pool.worker\u4e2d\u7684\u6b64\u65b9\u6cd5\u6765\u6e05\u7406pool.workers\u4e2d\u7684\u8fc7\u671fworker\n reset() // \u91cd\u7f6e\uff0c\u6e05\u7a7aWorkerArray\u4e2d\u6240\u6709\u7684Worker\n}\n\n\n\n")),(0,a.kt)("p",null,"workerArray \u63a5\u53e3\u7684\u5b9e\u73b0workerStack \u548cloopQueue"),(0,a.kt)("h3",{id:"\u4efb\u52a1\u6267\u884c-1"},"\u4efb\u52a1\u6267\u884c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// run starts a goroutine to repeat the process\n// that performs the function calls.\nfunc (w *goWorker) run() {\n   w.pool.addRunning(1) // pool\u7684running \u52a0 \u4e00\n   go func() {\n      defer func() {\n         w.pool.addRunning(-1)\n         w.pool.workerCache.Put(w)\n         if p := recover(); p != nil {\n            if ph := w.pool.options.PanicHandler; ph != nil {\n               ph(p)\n            } else {\n               w.pool.options.Logger.Printf("worker exits from a panic: %v\\n", p)\n               var buf [4096]byte\n               n := runtime.Stack(buf[:], false)\n               w.pool.options.Logger.Printf("worker exits from panic: %s\\n", string(buf[:n]))\n            }\n         }\n         // Call Signal() here in case there are goroutines waiting for available workers.\n         w.pool.cond.Signal() \n      }()\n\n      for f := range w.task {\n         if f == nil {\n            return\n         }\n         f() // \u4efb\u52a1\u6267\u884c\n         if ok := w.pool.revertWorker(w); !ok { // \u56de\u6536woker\n            return\n         }\n      }\n   }()\n}\n\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"revertWorker"),"worker\u56de\u6536"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u903b\u8f91\u7b80\u5355\uff1a1\u3001\u5f80workerArray \u961f\u5217\u4e2d\u63d2\u5165\uff1b2\u3001\u901a\u77e5\u6b63\u5728\u963b\u585e\u83b7\u53d6worker\u7684goroutines")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// revertWorker puts a worker back into free pool, recycling the goroutines.\nfunc (p *Pool) revertWorker(worker *goWorker) bool {\n if capacity := p.Cap(); (capacity > 0 && p.Running() > capacity) || p.IsClosed() {\n  p.cond.Broadcast()\n  return false\n }\n worker.recycleTime = p.nowTime()\n p.lock.Lock()\n\n // To avoid memory leaks, add a double check in the lock scope.\n // Issue: https://github.com/panjf2000/ants/issues/113\n if p.IsClosed() {\n  p.lock.Unlock()\n  return false\n }\n\n err := p.workers.insert(worker)\n if err != nil {\n  p.lock.Unlock()\n  return false\n }\n\n // Notify the invoker stuck in 'retrieveWorker()' of there is an available worker in the worker queue.\n p.cond.Signal()\n p.lock.Unlock()\n return true\n}\n\n\n")),(0,a.kt)("h3",{id:"\u5b9a\u65f6\u6e05\u7406\u8fc7\u671f\u7684worker"},"\u5b9a\u65f6\u6e05\u7406\u8fc7\u671f\u7684worker"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func (p *Pool) goPurge() {\n if p.options.DisablePurge {\n  return\n }\n\n // Start a goroutine to clean up expired workers periodically.\n var ctx context.Context\n ctx, p.stopPurge = context.WithCancel(context.Background())\n go p.purgeStaleWorkers(ctx)\n}\n\n// purgeStaleWorkers clears stale workers periodically, it runs in an individual goroutine, as a scavenger.\nfunc (p *Pool) purgeStaleWorkers(ctx context.Context) {\n ticker := time.NewTicker(p.options.ExpiryDuration)\n\n defer func() {\n  ticker.Stop()\n  atomic.StoreInt32(&p.purgeDone, 1)\n }()\n\n for {\n  select {\n  case <-ctx.Done():\n   return\n  case <-ticker.C:\n  }\n\n  if p.IsClosed() {\n   break\n  }\n\n  p.lock.Lock()\n  expiredWorkers := p.workers.retrieveExpiry(p.options.ExpiryDuration)\n  p.lock.Unlock()\n\n  // Notify obsolete workers to stop.\n  // This notification must be outside the p.lock, since w.task\n  // may be blocking and may consume a lot of time if many workers\n  // are located on non-local CPUs.\n  for i := range expiredWorkers {\n   expiredWorkers[i].task <- nil\n   expiredWorkers[i] = nil\n  }\n\n  // There might be a situation where all workers have been cleaned up(no worker is running),\n  // or another case where the pool capacity has been Tuned up,\n  // while some invokers still get stuck in "p.cond.Wait()",\n  // then it ought to wake all those invokers.\n  if p.Running() == 0 || (p.Waiting() > 0 && p.Free() > 0) {\n   p.cond.Broadcast()\n  }\n }\n}\n\n\n\n')),(0,a.kt)("p",null,"ants\u6e90\u7801 \u81ea\u65cb\u9501\u7684\u8bbe\u8ba1\u3001sync.cond \u6761\u4ef6\u53d8\u91cf \u3001sync.pool \u5bf9\u8c61\u6c60\uff0c\u539f\u5b50\u64cd\u4f5c\uff0cchannel\u901a\u4fe1\u7b49"))}w.isMDXComponent=!0}}]);