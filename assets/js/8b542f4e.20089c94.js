"use strict";(self.webpackChunkah_kevin_xy=self.webpackChunkah_kevin_xy||[]).push([[97341],{31566:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=o(85893),i=o(11151);const r={},d="mode",s={id:"backend/go/gin/source/1.7.7/mode",title:"mode",description:"",source:"@site/docs/backend/go/gin/source/1.7.7/mode.md",sourceDirName:"backend/go/gin/source/1.7.7",slug:"/backend/go/gin/source/1.7.7/mode",permalink:"/docs/backend/go/gin/source/1.7.7/mode",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"logger",permalink:"/docs/backend/go/gin/source/1.7.7/logger"},next:{title:"path",permalink:"/docs/backend/go/gin/source/1.7.7/path"}},a={},c=[];function l(e){const n={code:"code",h1:"h1",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"mode",children:"mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// Copyright 2014 Manu Martinez-Almeida.  All rights reserved.\n// Use of this source code is governed by a MIT style\n// license that can be found in the LICENSE file.\n\npackage gin\n\nimport (\n "io"\n "os"\n\n "github.com/gin-gonic/gin/binding"\n)\n\n// EnvGinMode indicates environment name for gin mode.\nconst EnvGinMode = "GIN_MODE"\n\nconst (\n // DebugMode indicates gin mode is debug.\n DebugMode = "debug"\n // ReleaseMode indicates gin mode is release.\n ReleaseMode = "release"\n // TestMode indicates gin mode is test.\n TestMode = "test"\n)\n\nconst (\n debugCode = iota\n releaseCode\n testCode\n)\n\n// DefaultWriter is the default io.Writer used by Gin for debug output and\n// middleware output like Logger() or Recovery().\n// Note that both Logger and Recovery provides custom ways to configure their\n// output io.Writer.\n// To support coloring in Windows use:\n//   import "github.com/mattn/go-colorable"\n//   gin.DefaultWriter = colorable.NewColorableStdout()\nvar DefaultWriter io.Writer = os.Stdout\n\n// DefaultErrorWriter is the default io.Writer used by Gin to debug errors\nvar DefaultErrorWriter io.Writer = os.Stderr\n\nvar ginMode = debugCode\nvar modeName = DebugMode\n\nfunc init() {\n mode := os.Getenv(EnvGinMode)\n SetMode(mode)\n}\n\n// SetMode sets gin mode according to input string.\nfunc SetMode(value string) {\n if value == "" {\n  value = DebugMode\n }\n\n switch value {\n case DebugMode:\n  ginMode = debugCode\n case ReleaseMode:\n  ginMode = releaseCode\n case TestMode:\n  ginMode = testCode\n default:\n  panic("gin mode unknown: " + value + " (available mode: debug release test)")\n }\n\n modeName = value\n}\n\n// DisableBindValidation closes the default validator.\nfunc DisableBindValidation() {\n binding.Validator = nil\n}\n\n// EnableJsonDecoderUseNumber sets true for binding.EnableDecoderUseNumber to\n// call the UseNumber method on the JSON Decoder instance.\nfunc EnableJsonDecoderUseNumber() {\n binding.EnableDecoderUseNumber = true\n}\n\n// EnableJsonDecoderDisallowUnknownFields sets true for binding.EnableDecoderDisallowUnknownFields to\n// call the DisallowUnknownFields method on the JSON Decoder instance.\nfunc EnableJsonDecoderDisallowUnknownFields() {\n binding.EnableDecoderDisallowUnknownFields = true\n}\n\n// Mode returns currently gin mode.\nfunc Mode() string {\n return modeName\n}\n\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>s,a:()=>d});var t=o(67294);const i={},r=t.createContext(i);function d(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);