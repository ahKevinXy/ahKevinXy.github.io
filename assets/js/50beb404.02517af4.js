"use strict";(self.webpackChunkah_kevin_xy=self.webpackChunkah_kevin_xy||[]).push([[87307],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),h=a,b=u["".concat(c,".").concat(h)]||u[h]||f[h]||i;return t?r.createElement(b,o(o({ref:n},p),{},{components:t})):r.createElement(b,o({ref:n},p))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},15171:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const i={},o="path",s={unversionedId:"backend/go/gin/source/1.7.7/path",id:"backend/go/gin/source/1.7.7/path",title:"path",description:"",source:"@site/docs/backend/go/gin/source/1.7.7/path.md",sourceDirName:"backend/go/gin/source/1.7.7",slug:"/backend/go/gin/source/1.7.7/path",permalink:"/docs/backend/go/gin/source/1.7.7/path",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"mode",permalink:"/docs/backend/go/gin/source/1.7.7/mode"},next:{title:"Recovery",permalink:"/docs/backend/go/gin/source/1.7.7/recovery"}},c={},l=[],p={toc:l},u="wrapper";function f(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"path"},"path"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Copyright 2013 Julien Schmidt. All rights reserved.\n// Based on the path package, Copyright 2009 The Go Authors.\n// Use of this source code is governed by a BSD-style license that can be found\n// at https://github.com/julienschmidt/httprouter/blob/master/LICENSE.\n\npackage gin\n\n// cleanPath is the URL version of path.Clean, it returns a canonical URL path\n// for p, eliminating . and .. elements.\n//\n// The following rules are applied iteratively until no further processing can\n// be done:\n// 1. Replace multiple slashes with a single slash.\n// 2. Eliminate each . path name element (the current directory).\n// 3. Eliminate each inner .. path name element (the parent directory)\n//    along with the non-.. element that precedes it.\n// 4. Eliminate .. elements that begin a rooted path:\n//    that is, replace \"/..\" by \"/\" at the beginning of a path.\n//\n// If the result of this process is an empty string, \"/\" is returned.\nfunc cleanPath(p string) string {\n const stackBufSize = 128\n // Turn empty string into \"/\"\n if p == \"\" {\n  return \"/\"\n }\n\n // Reasonably sized buffer on stack to avoid allocations in the common case.\n // If a larger buffer is required, it gets allocated dynamically.\n buf := make([]byte, 0, stackBufSize)\n\n n := len(p)\n\n // Invariants:\n //      reading from path; r is index of next byte to process.\n //      writing to buf; w is index of next byte to write.\n\n // path must start with '/'\n r := 1\n w := 1\n\n if p[0] != '/' {\n  r = 0\n\n  if n+1 > stackBufSize {\n   buf = make([]byte, n+1)\n  } else {\n   buf = buf[:n+1]\n  }\n  buf[0] = '/'\n }\n\n trailing := n > 1 && p[n-1] == '/'\n\n // A bit more clunky without a 'lazybuf' like the path package, but the loop\n // gets completely inlined (bufApp calls).\n // loop has no expensive function calls (except 1x make)  // So in contrast to the path package this loop has no expensive function\n // calls (except make, if needed).\n\n for r < n {\n  switch {\n  case p[r] == '/':\n   // empty path element, trailing slash is added after the end\n   r++\n\n  case p[r] == '.' && r+1 == n:\n   trailing = true\n   r++\n\n  case p[r] == '.' && p[r+1] == '/':\n   // . element\n   r += 2\n\n  case p[r] == '.' && p[r+1] == '.' && (r+2 == n || p[r+2] == '/'):\n   // .. element: remove to last /\n   r += 3\n\n   if w > 1 {\n    // can backtrack\n    w--\n\n    if len(buf) == 0 {\n     for w > 1 && p[w] != '/' {\n      w--\n     }\n    } else {\n     for w > 1 && buf[w] != '/' {\n      w--\n     }\n    }\n   }\n\n  default:\n   // Real path element.\n   // Add slash if needed\n   if w > 1 {\n    bufApp(&buf, p, w, '/')\n    w++\n   }\n\n   // Copy element\n   for r < n && p[r] != '/' {\n    bufApp(&buf, p, w, p[r])\n    w++\n    r++\n   }\n  }\n }\n\n // Re-append trailing slash\n if trailing && w > 1 {\n  bufApp(&buf, p, w, '/')\n  w++\n }\n\n // If the original string was not modified (or only shortened at the end),\n // return the respective substring of the original string.\n // Otherwise return a new string from the buffer.\n if len(buf) == 0 {\n  return p[:w]\n }\n return string(buf[:w])\n}\n\n// Internal helper to lazily create a buffer if necessary.\n// Calls to this function get inlined.\nfunc bufApp(buf *[]byte, s string, w int, c byte) {\n b := *buf\n if len(b) == 0 {\n  // No modification of the original string so far.\n  // If the next character is the same as in the original string, we do\n  // not yet have to allocate a buffer.\n  if s[w] == c {\n   return\n  }\n\n  // Otherwise use either the stack buffer, if it is large enough, or\n  // allocate a new buffer on the heap, and copy all previous characters.\n  length := len(s)\n  if length > cap(b) {\n   *buf = make([]byte, length)\n  } else {\n   *buf = (*buf)[:length]\n  }\n  b = *buf\n\n  copy(b, s[:w])\n }\n b[w] = c\n}\n\n")))}f.isMDXComponent=!0}}]);